package nonprimitive;

public class constrinvoke {
	protected int val1;
	protected int val2;
	protected int val3;

	public constrinvoke(int a, int b, int c) {
		val1 = a;
		val2 = b;
		val3 = c;
		System.out.println("Base class constr iscalled");
	}
	public void printDetails() {
		System.out.println("we are printing details of super  class");
		System.out.println(val1+""+val2+""+val3);
	}
	public void trail12() {
		System.out.println("Trail ..super class.....downcasting");
	}
}

class constrinvoke1 extends constrinvoke {
	private int val4;
	private int val5;
	public constrinvoke1(int a, int b, int c,int d,int e) {
		super( a, b,  c);
		System.out.println("derived constr is called");
		val3=d;
		val4=e;
	}
	 public void printDetails() {
		 System.out.println("we are printing details of sub class");
		System.out.println(super.val1+""+super.val2+""+super.val3+""+val4+""+val5);
	}
	 public void trail() {
			System.out.println("Trail ....subclass...downcasting");
		}
}
//////////////////Driver
package nonprimitive;

public class Driverinvoke {

	public static void main(String[] args) {
		// this is direct addressing(same class ref is pointing to same class object
		constrinvoke1 obj = new constrinvoke1(2, 3, 4, 5, 6);// constrinvoke is parent ...constrinvoke1 is child

		obj.printDetails();//print details is overidden method

		constrinvoke obj1 = new constrinvoke1(1, 2, 3, 4, 5);// This is called Upcasting ...............(parent ref to child object)

		obj1.printDetails();
		obj1.trail12();
		// we are trying Downcasting .................
		constrinvoke obj2 = new constrinvoke1(2, 3, 4,5,6);// ref is parent  type//remove 1 it throw error(because of uncompatible type)
		constrinvoke1 obj3 = (constrinvoke1) obj2;// parent is  down cast to child type//constrinvoke1 is child type
       obj3.printDetails();//printDetail is overidden method
        
	}

}
